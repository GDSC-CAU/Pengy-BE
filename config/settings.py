"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

import firebase_admin
from firebase_admin import credentials, initialize_app

import os
from django.core.exceptions import ImproperlyConfigured

from dotenv import load_dotenv

# Google Cloud Storage를 위한 설정
import google.auth
from google.oauth2 import service_account
import google.cloud.storage

# 환경 변수 로드를 위한 코드
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# 환경 변수 분리
def get_env_variable(name):
    try:
        return os.environ[name]
    except KeyError:
        raise Exception(f"The environment variable {name} is not set.")

# SECURITY WARNING: don't run with debug turned on in production!
if get_env_variable("ENVIRONMENT") == 'production':
    DEBUG = False
else:
    DEBUG = True

# Allowed host 
ALLOWED_HOSTS = ['*']

# CORS 설정
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'config',
    'eduContents',
    'fireHazards',
    'spaces',
    'users',
    'notifications',
    'quizzes', 

    'rest_framework',
    'django_extensions',
    'drf_spectacular',

    'corsheaders',

    'storages', # Google Cloud Storage를 위한 라이브러리
]


# static 파일 설정 개발 환경과 배포 환경을 나누기 위해 if문 추가, 나중에 배포하려면 주석처리
if get_env_variable("ENVIRONMENT") == 'production':
    GS_STATIC_CREDENTIALS  = service_account.Credentials.from_service_account_file(
        "secrets/bucket-admin.json"
    )

        # 미디어 파일용 서비스 계정 키
    GS_MEDIA_CREDENTIALS = service_account.Credentials.from_service_account_file(
        "secrets/storage-service-account.json"
    )

    GS_PROJECT_ID = '443495191297'

    GS_STATIC_BUCKET_NAME = 'pengy_bucket-1'
    STATICFILES_STORAGE = 'config.storage_backends.GoogleCloudStaticStorage'
    STATIC_URL = 'https://storage.googleapis.com/{}/'.format(GS_STATIC_BUCKET_NAME)

    GS_MEDIA_BUCKET_NAME = 'pengy_bucket-2'
    DEFAULT_FILE_STORAGE = 'config.storage_backends.GoogleCloudMediaStorage'
    MEDIA_URL = 'https://storage.googleapis.com/{}/'.format(GS_MEDIA_BUCKET_NAME)


else:
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    MEDIA_URL = '/media/'
    MEDIA_ROOT = 'media'




MIDDLEWARE = [


    # 미들웨어 24/02/09 
    'corsheaders.middleware.CorsMiddleware', ## 이거 추가!! 위치 중요!!!
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', ## 이거 추가!!
        # Firebase 인증 미들웨어 추가
    'config.middleware.FirebaseAuthenticationMiddleware',

]

# settings.py에 인증 백엔드 추가
AUTHENTICATION_BACKENDS = [
    'users.auth.FirebaseBackend',
    'django.contrib.auth.backends.ModelBackend',  # 기본 모델 백엔드 유지
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',  # 필요한 경우 추가
        # 다른 인증 클래스가 필요한 경우 여기에 추가
    ),
    # 다른 DRF 설정...
}

# # 미들웨어 테스트를 위한 로그 설정 - 개발환경에서만!!
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': 'my_log.log',
#         },
#     },
#     'root': {
#         'handlers': ['file'],
#         'level': 'DEBUG',
#     },
# }

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'config.wsgi.application'

# 데이터베이스 연결
if get_env_variable("ENVIRONMENT") == 'production':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': get_env_variable("DB_NAME"),
            'USER': get_env_variable("DB_USER"),
            'PASSWORD': get_env_variable("DB_PASSWORD"),
            'HOST': get_env_variable("DB_HOST"),
            'PORT': get_env_variable("DB_PORT"),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ko'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# users 모델 커스터마이징
AUTH_USER_MODEL = 'users.MyUser'

# CSRF 관련 설정
CSRF_TRUSTED_ORIGINS = [
    'https://fire-61d9a.du.r.appspot.com',
    'https://www.fire-61d9a.du.r.appspot.com',
    'https://pengy.dev',
    'https://www.pengy.dev',
    'https://6bb7-219-255-207-60.ngrok-free.app',
]

CSRF_COOKIE_SECURE = False

SESSION_COOKIE_SECURE = False

# SECURITY WARNING: keep the secret key used in production secret! 
SECRET_KEY = get_env_variable("DJANGO_SECRET")

# FIREBASE_ADMINSDK_PATH 환경 변수에서 Firebase Admin SDK JSON 파일 경로 가져오기
try: 
    firebase_adminsdk_path = get_env_variable('FIREBASE_ADMINSDK_PATH')
    cred = credentials.Certificate(firebase_adminsdk_path)
except Exception as e:
    print('Firebase Admin SDK JSON 파일 로드 실패')

initialize_app(cred)


